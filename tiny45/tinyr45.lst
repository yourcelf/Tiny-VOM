gavrasm Gerd's AVR assembler version 2.1 (C)2006 by DG4FAC
----------------------------------------------------------
Source file: tinyr45.asm
Hex file:    tinyr45.hex
Eeprom file: tinyr45.eep
Compiled:    02.05.2009, 17:10:30
Pass:        2
     1: ;
     2: ; tiny R 45 -- OHM only version
     3: ; for Tiny-VOM 45 board
     4: ;
     5: 
     6: ;.include "tn45def.inc"
     7: .device attiny45
     8: 
     9: .equ txpin = PB1; serial transmit
    10: .equ rxpin = PB0; serial receive
    11: .equ v_adc_pin = PB4;
    12: .equ r_adc_pin = PB3;
    13: .equ c_adc_pin = PB2;
    14: 
    15: .def bitcnt = R16; bit counter
    16: .def temp = R17; temporary storage
    17: .def temp1 = R18; temporary storage
    18: .def txbyte = R19; transmit byte
    19: .def rxbyte = R20; receive byte
    20: 
    21: 
    22: .cseg
    23: .org 0
    24: 000000   C020  rjmp reset
    25: 
    26: ;
    27: ; putchar
    28: ; assumes no line driver (doesn't invert bits)
    29: ;
    30: .equ sb = 1; number of stop bits
    31: putchar:
    32: 000001   E00A  ldi bitcnt, 9+sb; 1+8+sb
    33: 000002   9530  com txbyte; invert everything
    34: 000003   9408  sec; set start bit
    35:     putchar0:
    36: 000004   F410  brcc putchar1; if carry set
    37: 000005   9AC1  sbi PORTB, txpin; send a '0'
    38: 000006   C002  rjmp putchar2; else	
    39:     putchar1:
    40: 000007   98C1  cbi PORTB, txpin	; send a '1'
    41: 000008   0000  nop ; even out timing
    42:     putchar2:
    43: 000009   D013  rcall bitdelay; one bit delay
    44: 00000A   D012  rcall bitdelay
    45: 00000B   9536  lsr txbyte; get next bit
    46: 00000C   950A  dec bitcnt; if not all bits sent
    47: 00000D   F7B1  brne putchar0; send next bit
    48: 00000E   9508  ret;
    49: ;
    50: ; getchar
    51: ; assumes no line driver (doesn't invert bits)
    52: ;
    53: getchar:
    54: 00000F   E009  ldi bitcnt,9 ; 8 data bit + 1 stop bit
    55:     getchar1:
    56: 000010   9BB0  sbis PINB, rxpin ; wait for start bit
    57: 000011   CFFE  rjmp getchar1
    58: 000012   D00A  rcall bitdelay ; 0.5 bit delay
    59:     getchar2:
    60: 000013   D009  rcall bitdelay ; 1 bit delay
    61: 000014   D008  rcall bitdelay ;
    62: 000015   9488  clc ; clear carry
    63: 000016   9BB0  sbis PINB, rxpin ; if RX pin high skip
    64: 000017   9408  sec ; otherwise set carry
    65: 000018   950A  dec bitcnt
    66: 000019   F011  breq getchar3 ; return if all bits read
    67: 00001A   9547  ror rxbyte ; otherwise shift bit into receive byte
    68: 00001B   CFF7  rjmp getchar2 ; go get next bit
    69:     getchar3:
    70: 00001C   9508  ret
    71: ;
    72: ; bitdelay
    73: ; serial bit delay
    74: ;
    75: .equ b = 13 ; 9600 baud (8 MHz clock /8)
    76: bitdelay:
    77: 00001D   E01D  ldi temp, b
    78:     bitloop:
    79: 00001E   951A  dec temp
    80: 00001F   F7F1  brne bitloop
    81: 000020   9508  ret
    82: ;
    83: ; main program
    84: ;
    85: reset:
    86:     ;
    87:     ; set stack pointer to top of RAM
    88:     ;
    89: 000021   E011  ldi temp, high(RAMEND)
    90: 000022   BF1E  out SPH, temp
    91: 000023   E51F  ldi temp, low(RAMEND)
    92: 000024   BF1D  out SPL, temp
    93:     ;
    94:     ; init comm pins
    95:     ;
    96: 000025   98C1  cbi PORTB, txpin
    97: 000026   9AB9  sbi DDRB, txpin
    98: 000027   98C0  cbi PORTB, rxpin
    99: 000028   98B8  cbi DDRB, rxpin
   100:     ;
   101:     ; init ADC
   102:     ;
   103: 
   104:     ; common pin output low (sink)
   105: 000029   9ABA  sbi DDRB, c_adc_pin
   106: 00002A   98C2  cbi PORTB, c_adc_pin
   107:     ; ohm read pin input low
   108: 00002B   98BB  cbi DDRB, r_adc_pin
   109: 00002C   98C3  cbi PORTB, r_adc_pin
   110:     ; voltage read pin input low
   111: 00002D   98BC  cbi DDRB, v_adc_pin
   112: 00002E   98C4  cbi PORTB, v_adc_pin
   113:     ; ADMUX: Select ADC3, set to 2.56V internal reference
   114: 00002F   E913  ldi temp, 0b10010011
   115: 000030   B917  out ADMUX, temp
   116:     ; ADCSRB: Set unipolar, non-inverse.
   117: 000031   E010  ldi temp, 0b00000000
   118: 000032   B913  out ADCSRB, temp
   119:     ; ADCSRA: Enable ADC
   120: 000033   E810  ldi temp, 0b10000000
   121: 000034   B916  out ADCSRA, temp
   122:     ;
   123:     ; start main loop
   124:     ;
   125:     loop:
   126:         ; Start conversion
   127: 000035   9A36  sbi ADCSRA, ADSC
   128:         AD_loop:
   129: 000036   9936  sbic ADCSRA, ADSC ; loop until complete
   130: 000037   CFFE  rjmp AD_loop
   131: 
   132:         ; send ADC data on serial
   133: 000038   B134  in txbyte, ADCL ; low byte
   134: 000039   DFC7  rcall putchar
   135: 00003A   B135  in txbyte, ADCH ; hi byte
   136: 00003B   DFC5  rcall putchar
   137: 00003C   CFF8  rjmp loop
 -> Warning 001: 2 symbol(s) defined, but not used!

Program             :       61 words.
Constants           :        0 words.
Total program memory:       61 words.
Eeprom space        :        0 bytes.
Data segment        :        0 bytes.
Compilation completed, no errors.
Compilation endet 02.05.2009, 17:10:30
