gavrasm Gerd's AVR assembler version 2.1 (C)2006 by DG4FAC
----------------------------------------------------------
Source file: tinyvom45.asm
Hex file:    tinyvom45.hex
Eeprom file: tinyvom45.eep
Compiled:    02.05.2009, 16:52:03
Pass:        2
     1: ;
     2: ; Tiny-VOM 45
     3: ;
     4: 
     5: ;.include "tn45def.inc"
     6: .device attiny45
     7: 
     8: .equ txpin = PB1; serial transmit
     9: .equ rxpin = PB0; serial receive
    10: .equ v_adc_pin = PB4;
    11: .equ r_adc_pin = PB3;
    12: .equ c_adc_pin = PB2;
    13: 
    14: .def bitcnt = R16; bit counter
    15: .def temp = R17; temporary storage
    16: .def temp1 = R18; temporary storage
    17: .def txbyte = R19; transmit byte
    18: .def rxbyte = R20; receive byte
    19: 
    20: 
    21: .cseg
    22: .org 0
    23: 000000   C020  rjmp reset
    24: 
    25: ;
    26: ; putchar
    27: ; assumes no line driver (doesn't invert bits)
    28: ;
    29: .equ sb = 1; number of stop bits
    30: putchar:
    31: 000001   E00A  ldi bitcnt, 9+sb; 1+8+sb
    32: 000002   9530  com txbyte; invert everything
    33: 000003   9408  sec; set start bit
    34:     putchar0:
    35: 000004   F410  brcc putchar1; if carry set
    36: 000005   9AC1  sbi PORTB, txpin; send a '0'
    37: 000006   C002  rjmp putchar2; else	
    38:     putchar1:
    39: 000007   98C1  cbi PORTB, txpin	; send a '1'
    40: 000008   0000  nop ; even out timing
    41:     putchar2:
    42: 000009   D013  rcall bitdelay; one bit delay
    43: 00000A   D012  rcall bitdelay
    44: 00000B   9536  lsr txbyte; get next bit
    45: 00000C   950A  dec bitcnt; if not all bits sent
    46: 00000D   F7B1  brne putchar0; send next bit
    47: 00000E   9508  ret;
    48: ;
    49: ; getchar
    50: ; assumes no line driver (doesn't invert bits)
    51: ;
    52: getchar:
    53: 00000F   E009  ldi bitcnt,9 ; 8 data bit + 1 stop bit
    54:     getchar1:
    55: 000010   9BB0  sbis PINB, rxpin ; wait for start bit
    56: 000011   CFFE  rjmp getchar1
    57: 000012   D00A  rcall bitdelay ; 0.5 bit delay
    58:     getchar2:
    59: 000013   D009  rcall bitdelay ; 1 bit delay
    60: 000014   D008  rcall bitdelay ;
    61: 000015   9488  clc ; clear carry
    62: 000016   9BB0  sbis PINB, rxpin ; if RX pin high skip
    63: 000017   9408  sec ; otherwise set carry
    64: 000018   950A  dec bitcnt
    65: 000019   F011  breq getchar3 ; return if all bits read
    66: 00001A   9547  ror rxbyte ; otherwise shift bit into receive byte
    67: 00001B   CFF7  rjmp getchar2 ; go get next bit
    68:     getchar3:
    69: 00001C   9508  ret
    70: ;
    71: ; bitdelay
    72: ; serial bit delay
    73: ;
    74: .equ b = 13 ; 9600 baud (8 MHz clock /8)
    75: bitdelay:
    76: 00001D   E01D  ldi temp, b
    77:     bitloop:
    78: 00001E   951A  dec temp
    79: 00001F   F7F1  brne bitloop
    80: 000020   9508  ret
    81: ;
    82: ; main program
    83: ;
    84: reset:
    85:     ;
    86:     ; set stack pointer to top of RAM
    87:     ;
    88: 000021   E011  ldi temp, high(RAMEND)
    89: 000022   BF1E  out SPH, temp
    90: 000023   E51F  ldi temp, low(RAMEND)
    91: 000024   BF1D  out SPL, temp
    92:     ;
    93:     ; init comm pins
    94:     ;
    95: 000025   98C1  cbi PORTB, txpin
    96: 000026   9AB9  sbi DDRB, txpin
    97: 000027   98C0  cbi PORTB, rxpin
    98: 000028   98B8  cbi DDRB, rxpin
    99:     ;
   100:     ; init ADC
   101:     ;
   102: 
   103:     ; common pin output low
   104: 000029   9ABA  sbi DDRB, c_adc_pin
   105: 00002A   98C2  cbi PORTB, c_adc_pin
   106:     ; ohm read pin input low
   107: 00002B   98BB  cbi DDRB, r_adc_pin
   108: 00002C   98C3  cbi PORTB, r_adc_pin
   109:     ; voltage read pin input low
   110: 00002D   98BC  cbi DDRB, v_adc_pin
   111: 00002E   98C4  cbi PORTB, v_adc_pin
   112:     ; ADMUX: Select ADC2, set to 2.56V internal reference
   113: 00002F   E912  ldi temp, 0b10010010
   114: 000030   B917  out ADMUX, temp
   115:     ; ADCSRB: Set unipolar, non-inverse.
   116: 000031   E010  ldi temp, 0b00000000
   117: 000032   B913  out ADCSRB, temp
   118:     ; ADCSRA: Enable ADC
   119: 000033   E810  ldi temp, 0b10000000
   120: 000034   B916  out ADCSRA, temp
   121:     ;
   122:     ; start main loop
   123:     ;
   124:     loop:
   125:         ; Start conversion
   126: 000035   9A36  sbi ADCSRA, ADSC
   127:         AD_loop:
   128: 000036   9936  sbic ADCSRA, ADSC ; loop until complete
   129: 000037   CFFE  rjmp AD_loop
   130: 
   131:         ; send ADC data on serial
   132: 000038   B134  in txbyte, ADCL ; low byte
   133: 000039   DFC7  rcall putchar
   134: 00003A   B135  in txbyte, ADCH ; hi byte
   135: 00003B   DFC5  rcall putchar
   136: 00003C   CFF8  rjmp loop
 -> Warning 001: 2 symbol(s) defined, but not used!

Program             :       61 words.
Constants           :        0 words.
Total program memory:       61 words.
Eeprom space        :        0 bytes.
Data segment        :        0 bytes.
Compilation completed, no errors.
Compilation endet 02.05.2009, 16:52:03
